name: Python application

on: 
 workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      continue-on-error: true
      run: |
        pip install pytest
        export PYTHONPATH=src
        pytest
    - name: Build docker image
      run: |
       docker build . --file Dockerfile --tag suheab/microservices:v1
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
         username: suheab
         password: Asma@786B
    - name: Push docker image to dockerhub
      run: |
        docker push suheab/microservices:v1
    # Install AWS CLI
    - name: Install AWS CLI
      run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Configure AWS credentials
    - name: Configure AWS credentials
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Install SSH and Copy SSH Key
      uses: ./.github/actions/install-ssh-and-copy-key
      with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Add EC2 instance to known hosts
      run: ssh-keyscan -t rsa ${{ secrets.EC2_PUBLIC_IP }} >> $HOME/.ssh/known_hosts 
     # Connect to EC2 instance and configure Minikube and kubectl
    - name: Configure Minikube and kubectl on EC2 instance
      run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} 'bash -s' < configure_minikube_and_kubectl.sh
